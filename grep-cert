#!/usr/bin/env ruby

require 'openssl'
require 'optparse'
require 'time'

options = {}

OptionParser.new do |opts|
  opts.banner = "Usage: grep-cert [OPTIONS] [FILE ...]"
  opts.separator "\n"

  opts.on("-b", "--begin-date [s]", "Select only certificates whose notBefore is >= this date ('now', if omitted)") do |s|
    options[:begin_date] = s.nil? ? Time.now : DateTime.parse(s).to_time
  end
  opts.on("-e", "--end-date [s]", "Select only certificates whose notAfter is <= this date ('now', if omitted)") do |s|
    options[:end_date] = s.nil? ? Time.now : DateTime.parse(s).to_time
  end
  opts.on("-i", "--issuer=s", "Select only certificates whose issuer matches the given pattern") do |s|
    options[:issuer] = s
  end
  opts.on("-s", "--subject=s", "Select only certificates whose subject matches the given pattern") do |s|
    options[:subject] = s
  end
  opts.on("-S", "--self-signed", "Select only certificates which are self-signed") do
    options[:self_signed] = true
  end
  opts.on("-v", "--invert-match", "Selected certificates are those *not* matching any of the specified criteria") do
    options[:invert] = true
  end

  opts.separator <<-EOF

grep-cert reads the given files, or standard input if no files are given,
looking for X509 certificates in PEM format.  For each certificate found, it
is echoed to standard output if all of the required conditions (specified by
the options) are met.  (If no conditions are specified, then every certificate
will match).

The --issuer, --subject and --self-signed options operate on RFC2253-encoded
forms, with regular expressions.  For example, --issuer=C=UK .

  EOF
end.parse!

def matches(cert, options)
  i = cert.issuer.to_s(OpenSSL::X509::Name::RFC2253)
  s = cert.subject.to_s(OpenSSL::X509::Name::RFC2253)
  return false if options[:begin_date] and cert.not_before >= options[:begin_date]
  return false if options[:end_date] and cert.not_after >= options[:end_date]
  return false if options[:issuer] and not i.match(options[:issuer])
  return false if options[:subject] and not s.match(options[:subject])
  return false if options[:self_signed] and i != s
  true
end

chunks = ARGF.read.split(/(?<=^-----END CERTIFICATE-----$\n)/)

now = Time.now

chunks.each do |chunk|
  cert = OpenSSL::X509::Certificate.new(chunk)
  if options[:invert] ^ matches(cert, options)
    puts cert.to_s
  end
end
